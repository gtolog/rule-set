name: resolve-hosts-and-save-ipcidr

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

jobs:
  resolve-hosts-and-save-ipcidr:
    runs-on: ubuntu-latest

    env:
      RESOLVERS: "223.5.5.5 119.29.29.29"  # List of resolvers as space-separated values
      INPUT: "DoH-elf.list"
      HOSTLIST: "host-list.txt"
      IPCIDRLIST_V4: "ipcidr-list-v4.txt"
      IPCIDRLIST_V6: "ipcidr-list-v6.txt"
      OUTPUT_V4: "output-ipcidr-v4.txt"
      OUTPUT_V6: "output-ipcidr-v6.txt"
      
    steps:
      - uses: actions/checkout@v3  # Checkout the repo

      - name: Extract hostnames and IP-CIDRs
        run: |
          # Create empty files for hostnames and IP-CIDRs
          > $HOSTLIST
          > $IPCIDRLIST_V4
          > $IPCIDRLIST_V6
          
          # Process each line from the input file
          grep -E '^HOST,|^IP-CIDR,|^IP-CIDR6,' $INPUT | while IFS=',' read -r type value other; do
            if [[ "$type" == "HOST" ]]; then
              # Save HOST directly to the file
              echo "$value" >> $HOSTLIST
              echo "Saved HOST: $value"
            elif [[ "$type" == "IP-CIDR" ]]; then
              # Save IP-CIDR directly to the IPv4 file
              echo "$value" >> $IPCIDRLIST_V4
              echo "Saved IP-CIDR: $value"
            elif [[ "$type" == "IP-CIDR6" ]]; then
              # Save IP-CIDR directly to the IPv6 file
              echo "$value" >> $IPCIDRLIST_V6
              echo "Saved IP-CIDR6: $value"
            fi
          done

      - name: Resolve DNS with dig using resolvers list (handling resolution errors)
        run: |
          echo "Resolving domains using dig with resolvers $RESOLVERS..."
          > resolved_ips_v4.txt  # Create an empty file for IPv4 results
          > resolved_ips_v6.txt  # Create an empty file for IPv6 results

          # Convert resolvers to an array (space-separated list)
          IFS=' ' read -r -a resolver_array <<< "$RESOLVERS"

          # Read domains from host-list.txt and resolve them using each resolver
          while IFS= read -r domain; do
            echo "Resolving $domain with resolvers ${resolver_array[@]}..."
            
            # Resolve IPv4 addresses using each resolver
            for resolver in "${resolver_array[@]}"; do
              echo "Resolving $domain using resolver $resolver"
              result=$(dig @$resolver +short $domain +time=5 +retry=3 || true)

              if [[ -z "$result" ]]; then
                echo "No IPv4 addresses found for $domain using resolver $resolver"
              else
                # Check if the result is a CNAME
                if [[ "$result" =~ \. ]]; then
                  # If it's a CNAME, resolve the CNAME to IPv4 addresses
                  cname_result=$(dig @$resolver +short $result +time=5 +retry=3 || true)
                  if [[ -n "$cname_result" ]]; then
                    # If CNAME resolved to IPv4, append those to resolved_ips_v4.txt
                    echo "$cname_result" | grep -E '^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$' >> resolved_ips_v4.txt
                    echo "Found IPv4 addresses for CNAME $result: $cname_result"
                  else
                    echo "No IPv4 addresses found for CNAME $result using resolver $resolver"
                  fi
                else
                  # If result is an IPv4 address, just append it
                  echo "$result" | grep -E '^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$' >> resolved_ips_v4.txt
                  echo "Found IPv4 addresses: $result"
                fi
              fi
            done

            # Similarly for IPv6
            for resolver in "${resolver_array[@]}"; do
              echo "Resolving $domain using resolver $resolver"
              result=$(dig @$resolver +short -t AAAA $domain +time=5 +retry=3 || true)

              if [[ -z "$result" ]]; then
                echo "No IPv6 addresses found for $domain using resolver $resolver"
              else
                # Check if the result is a CNAME
                if [[ "$result" =~ \. ]]; then
                  # If it's a CNAME, resolve the CNAME to IPv6 addresses
                  cname_result=$(dig @$resolver +short -t AAAA $result +time=5 +retry=3 || true)
                  if [[ -n "$cname_result" ]]; then
                    # If CNAME resolved to IPv6, append those to resolved_ips_v6.txt
                    echo "$cname_result" | grep -E '^([0-9a-fA-F:]+)$' >> resolved_ips_v6.txt
                    echo "Found IPv6 addresses for CNAME $result: $cname_result"
                  else
                    echo "No IPv6 addresses found for CNAME $result using resolver $resolver"
                  fi
                else
                  # If result is an IPv6 address, just append it
                  echo "$result" | grep -E '^([0-9a-fA-F:]+)$' >> resolved_ips_v6.txt
                  echo "Found IPv6 addresses: $result"
                fi
              fi
            done
          done < $HOSTLIST

          # Optionally log the final output for debugging
          echo "Final resolved IPv4 addresses:"
          cat resolved_ips_v4.txt
          echo "Final resolved IPv6 addresses:"
          cat resolved_ips_v6.txt

      - name: Process and extract IPs and CIDRs
        run: |
          echo "Processing resolved IPs and extracting CIDRs"
          
          # Append resolved IPs to the respective IP-CIDR lists
          cat resolved_ips_v4.txt >> $IPCIDRLIST_V4
          cat resolved_ips_v6.txt >> $IPCIDRLIST_V6

          # Append original IP-CIDR list to output
          cat $IPCIDRLIST_V4 >> $OUTPUT_V4
          cat $IPCIDRLIST_V6 >> $OUTPUT_V6

          # Remove duplicates and sort the final list of IPs and CIDRs
          sort -u $OUTPUT_V4 -o $OUTPUT_V4  # Sort and remove duplicates in place for IPv4
          sort -u $OUTPUT_V6 -o $OUTPUT_V6  # Sort and remove duplicates in place for IPv6

          # Display the final result
          echo "IPv4 CIDRs:"
          cat $OUTPUT_V4
          echo "IPv6 CIDRs:"
          cat $OUTPUT_V6
          
      - name: Commit and push the changes
        run: |
          # Configure git with your name and email (use the GitHub Actions bot credentials)
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Stage the output files
          git add $OUTPUT_V4 $OUTPUT_V6
          
          # Commit the changes
          git commit -m "Update IP-CIDR output files"
          
          # Push the changes to the repository
          git push origin main
